{"version":3,"sources":["modules/recognize.js","script.js"],"names":["recognize","blob","callBack","myHeaders","Headers","formdata","FormData","append","fetch","method","headers","body","redirect","mode","then","response","console","log","json","result","catch","error","module","exports","elMic","elMicMessage","elNotification","mediaRecorderRef","wavObject","require","RECORD_TIME","init","initilizeDomRefferences","setupEventListeners","document","querySelector","elPlayer","addEventListener","record","event","navigator","mediaDevices","getUserMedia","audio","video","handleSuccess","e","alert","innerHTML","setTimeout","stop","stream","options","recordedChunks","mediaRecorder","MediaRecorder","mimeType","data","size","push","Blob","type","notify","start","unfocus","element","blur","title","artist","release_date","classList","remove","add","window","onload"],"mappings":";AAAA,IAAIA,EAAY,SAACC,EAAMC,GAClBC,IAAAA,EAAY,IAAIC,QAOhBC,EAAW,IAAIC,SACnBD,EAASE,OAAO,SAAU,mBAC1BF,EAASE,OAAO,OAAQN,GAUxBO,MAAM,sCARe,CACpBC,OAAQ,OACRC,QAASP,EACTQ,KAAMN,EACNO,SAAU,SACVC,KAAM,SAILC,KAAK,SAACC,GAECA,OADPC,QAAQC,IAAIF,GACLA,EAASG,SAEhBJ,KAAK,SAACK,GACNH,QAAQC,IAAIE,GACZjB,EAASiB,KAETC,MAAM,SAACC,GACPL,QAAQC,IAAI,QAASI,GACrBnB,EAAS,SAGZoB,OAAOC,QAAUvB;;ACjCjB,IAKIwB,EACAC,EACAC,EAEAC,EACAC,EAVE5B,EAAY6B,QAAQ,uBAEpBC,EAAc,IAUhBC,EAAO,WACVC,IACAC,KAIGD,EAA0B,WAC7BR,EAAQU,SAASC,cAAc,cAC/BC,SAAWF,SAASC,cAAc,WAClCV,EAAeS,SAASC,cAAc,eACtCT,EAAiBQ,SAASC,cAAc,kBAIrCF,EAAsB,WACzBT,EAAMa,iBAAiB,QAASC,IAM7BA,EAAS,SAACC,GACbC,UAAUC,aACRC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IACnC9B,KAAK+B,GACLzB,MAAM,SAAC0B,GACPC,MAAMD,GAENrB,EAAauB,UAAY,wBAE3BC,WAAW,WACVtB,EAAiBuB,QACfpB,IAGEe,EAAgB,SAAUM,GACzBC,IACAC,EAAiB,GACnBC,EAAgB,IAAIC,cAAcJ,EAFtB,CAAEK,SAAU,eAI5BF,EAAcjB,iBAAiB,gBAAiB,SAAUS,GACrDA,EAAEW,KAAKC,KAAO,GACjBL,EAAeM,KAAKb,EAAEW,QAIxBH,EAAcjB,iBAAiB,OAAQ,WACtCT,EAAY,IAAIgC,KAAKP,EAAgB,CAAEQ,KAAM,cAC7C7D,EAAU4B,EAAWkC,KAEtBnC,EAAmB2B,EACnBA,EAAcS,SAMXC,EAAU,SAACC,GACC,MAAXA,GACHA,EAAQC,QAINJ,EAAS,SAAC/C,GAETA,GADJiD,EAAQxC,GACQ,MAAZT,GAAuC,MAAnBA,EAASI,OAChCO,EAAesB,UAAf,uPAUM,CACgCjC,IAAAA,EAAAA,EAASI,OAAzCgD,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,aACrB3C,EAAesB,UAGTmB,oGAAAA,OAAAA,EAGGC,4EAAAA,OAAAA,EAGHC,yEAAAA,OAAAA,EATN,gDAcD3C,EAAe4C,UAAUC,OAAO,QAChCtB,WAAW,WACVvB,EAAe4C,UAAUE,IAAI,SAC3B,MAEJC,OAAOC,OAAS3C","file":"script.js","sourceRoot":"..\\src\\script","sourcesContent":["var recognize = (blob, callBack) => {\r\n\tvar myHeaders = new Headers();\r\n\t// myHeaders.append(\"api_token\", \"774a8e688bc5a445acca2aeee37295de\");\r\n\t// myHeaders.append(\r\n\t// \t\"Cookie\",\r\n\t// \t\"__cfduid=dc380c36c115d45754be9ac9d807fa75b1593100728\"\r\n\t// );\r\n\r\n\tvar formdata = new FormData();\r\n\tformdata.append(\"return\", \"lyrics,timecode\");\r\n\tformdata.append(\"file\", blob);\r\n\r\n\tvar requestOptions = {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: myHeaders,\r\n\t\tbody: formdata,\r\n\t\tredirect: \"follow\",\r\n\t\tmode: \"cors\",\r\n\t};\r\n\r\n\tfetch(\"https://api.audd.io/?api_token=test\", requestOptions)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(response);\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then((result) => {\r\n\t\t\tconsole.log(result);\r\n\t\t\tcallBack(result);\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.log(\"error\", error);\r\n\t\t\tcallBack(null);\r\n\t\t});\r\n};\r\nmodule.exports = recognize;\r\n","//imports\r\nconst recognize = require(\"./modules/recognize\");\r\n//const\r\nconst RECORD_TIME = 5000;\r\n\r\n//var\r\nvar elMic;\r\nvar elMicMessage;\r\nvar elNotification;\r\n\r\nvar mediaRecorderRef;\r\nvar wavObject;\r\n// init\r\nvar init = () => {\r\n\tinitilizeDomRefferences();\r\n\tsetupEventListeners();\r\n};\r\n\r\n// intializeDomRefferences\r\nvar initilizeDomRefferences = () => {\r\n\telMic = document.querySelector(\".micButton\");\r\n\telPlayer = document.querySelector(\".player\");\r\n\telMicMessage = document.querySelector(\".micMessage\");\r\n\telNotification = document.querySelector(\".notification\");\r\n};\r\n\r\n// setupEventListeners\r\nvar setupEventListeners = () => {\r\n\telMic.addEventListener(\"click\", record);\r\n};\r\n\r\n// event listeners\r\n\r\n// listener record\r\nvar record = (event) => {\r\n\tnavigator.mediaDevices\r\n\t\t.getUserMedia({ audio: true, video: false })\r\n\t\t.then(handleSuccess)\r\n\t\t.catch((e) => {\r\n\t\t\talert(e);\r\n\r\n\t\t\telMicMessage.innerHTML = \"did not find device\";\r\n\t\t});\r\n\tsetTimeout(() => {\r\n\t\tmediaRecorderRef.stop();\r\n\t}, RECORD_TIME);\r\n};\r\n\r\nconst handleSuccess = function (stream) {\r\n\tconst options = { mimeType: \"audio/webm\" };\r\n\tconst recordedChunks = [];\r\n\tlet mediaRecorder = new MediaRecorder(stream, options);\r\n\r\n\tmediaRecorder.addEventListener(\"dataavailable\", function (e) {\r\n\t\tif (e.data.size > 0) {\r\n\t\t\trecordedChunks.push(e.data);\r\n\t\t}\r\n\t});\r\n\r\n\tmediaRecorder.addEventListener(\"stop\", function () {\r\n\t\twavObject = new Blob(recordedChunks, { type: \"audio/mp3\" });\r\n\t\trecognize(wavObject, notify);\r\n\t});\r\n\tmediaRecorderRef = mediaRecorder;\r\n\tmediaRecorder.start();\r\n};\r\n\r\n// util\r\n\r\n// unfocus\r\nvar unfocus = (element) => {\r\n\tif (element != null) {\r\n\t\telement.blur();\r\n\t}\r\n};\r\n//notify\r\nvar notify = (response) => {\r\n\tunfocus(elMic);\r\n\tif (response == null || response.result == null) {\r\n\t\telNotification.innerHTML = `\r\n        <div class=\"notificationBody\">\r\n\t\t\t\t\t<div class=\"notificationTitle\">\r\n\t\t\t\t\t\tOOPS!\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"notificationMessage\">\r\n\t\t\t\t\t\tSong not found!\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>`;\r\n\t} else {\r\n\t\tlet { title, artist, release_date } = response.result;\r\n\t\telNotification.innerHTML = `\r\n        <div class=\"notificationBody\">\r\n\t\t\t\t\t<div class=\"notificationTitle\">\r\n\t\t\t\t\t\t${title}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"songElement\">\r\n\t\t\t\t\t\tby ${artist}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"songElement\">\r\n\t\t\t\t\t\t${release_date}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n        `;\r\n\t}\r\n\telNotification.classList.remove(\"hide\");\r\n\tsetTimeout(() => {\r\n\t\telNotification.classList.add(\"hide\");\r\n\t}, 5000);\r\n};\r\nwindow.onload = init;\r\n"]}